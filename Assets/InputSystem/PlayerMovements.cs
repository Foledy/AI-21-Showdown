//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMovement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovement"",
    ""maps"": [
        {
            ""name"": ""Playar"",
            ""id"": ""e281fc00-f0a1-48df-ba54-66eb92e40a91"",
            ""actions"": [
                {
                    ""name"": ""Movemoment"",
                    ""type"": ""Value"",
                    ""id"": ""79d90adf-d46b-4fb1-be69-0d75bbe59737"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""186d9940-86fd-472c-8c95-82cae371476b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movemoment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bfc0f0f3-621c-478a-b613-a1b7aebae842"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybard und Mause"",
                    ""action"": ""Movemoment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e8af36fd-1097-469a-ad40-905a20832974"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybard und Mause"",
                    ""action"": ""Movemoment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""419f2648-c78b-45e3-9136-a59af87cccf0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybard und Mause"",
                    ""action"": ""Movemoment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""896e8fc2-e695-4650-b6ab-b411ec0571c1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybard und Mause"",
                    ""action"": ""Movemoment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keybard und Mause"",
            ""bindingGroup"": ""Keybard und Mause"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Playar
        m_Playar = asset.FindActionMap("Playar", throwIfNotFound: true);
        m_Playar_Movemoment = m_Playar.FindAction("Movemoment", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playar
    private readonly InputActionMap m_Playar;
    private List<IPlayarActions> m_PlayarActionsCallbackInterfaces = new List<IPlayarActions>();
    private readonly InputAction m_Playar_Movemoment;
    public struct PlayarActions
    {
        private @PlayerMovement m_Wrapper;
        public PlayarActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movemoment => m_Wrapper.m_Playar_Movemoment;
        public InputActionMap Get() { return m_Wrapper.m_Playar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayarActions set) { return set.Get(); }
        public void AddCallbacks(IPlayarActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayarActionsCallbackInterfaces.Add(instance);
            @Movemoment.started += instance.OnMovemoment;
            @Movemoment.performed += instance.OnMovemoment;
            @Movemoment.canceled += instance.OnMovemoment;
        }

        private void UnregisterCallbacks(IPlayarActions instance)
        {
            @Movemoment.started -= instance.OnMovemoment;
            @Movemoment.performed -= instance.OnMovemoment;
            @Movemoment.canceled -= instance.OnMovemoment;
        }

        public void RemoveCallbacks(IPlayarActions instance)
        {
            if (m_Wrapper.m_PlayarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayarActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayarActions @Playar => new PlayarActions(this);
    private int m_KeybardundMauseSchemeIndex = -1;
    public InputControlScheme KeybardundMauseScheme
    {
        get
        {
            if (m_KeybardundMauseSchemeIndex == -1) m_KeybardundMauseSchemeIndex = asset.FindControlSchemeIndex("Keybard und Mause");
            return asset.controlSchemes[m_KeybardundMauseSchemeIndex];
        }
    }
    public interface IPlayarActions
    {
        void OnMovemoment(InputAction.CallbackContext context);
    }
}
